name: build-and-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  NUXT_PUBLIC_SUPABASE_URL: ${{ secrets.NUXT_PUBLIC_SUPABASE_URL }}
  NUXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NUXT_PUBLIC_SUPABASE_ANON_KEY }}

# 1) prove the NEW SWA + token accept uploads
jobs:
  deploy-smoke:
    if: ${{ github.event_name == 'workflow_dispatch' }}  # manual only
    runs-on: ubuntu-latest            # <‚Äî container action needs Linux
    timeout-minutes: 5
    steps:
      - name: Tiny site
        shell: bash
        run: |
          mkdir -p smoke
          echo '<!doctype html><title>ok</title><h1>ok</h1>' > smoke/index.html

      - name: SWA deploy (smoke)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          skip_app_build: true
          app_location: "smoke"
          production_branch: "main"

  # 2) build the site only if smoke succeeded
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CI: "true"
      NUXT_TELEMETRY_DISABLED: "1"
      NPM_CONFIG_FUND: "false"
      NPM_CONFIG_AUDIT: "false"
      NPM_CONFIG_REGISTRY: "https://registry.npmjs.org"
      PNPM_HOME: ~/.pnpm
      ASSETS_VERSION: v-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Prep pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpmstore-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpmstore-

      - name: Configure pnpm
        run: |
          set -euxo pipefail
          pnpm config set store-dir ~/.pnpm-store
          pnpm config set registry "$NPM_CONFIG_REGISTRY"
          pnpm config set fetch-retries 5
          pnpm config set fetch-retry-maxtimeout 60000

      - name: "‚è±Ô∏è Install (phase 1: fetch network)"
        run: |
          set -euxo pipefail
          date +"fetch start %T"
          pnpm fetch --frozen-lockfile
          date +"fetch end   %T"

      - name: "‚è±Ô∏è Install (phase 2: offline restore)"
        run: |
          set -euxo pipefail
          date +"install start %T"
          pnpm install --frozen-lockfile --offline
          date +"install end   %T"
          pnpm -v && node -v

      - name: "‚è±Ô∏è Build (Nuxt static, 12m cap + diagnostics)"
        run: |
          set -euxo pipefail
          date +"generate start %T"
          timeout 12m pnpm exec nuxi generate || {
            echo "üî¥ nuxi generate exceeded 12m ‚Äî dumping diagnostics"
            echo "Running processes:"; ps aux | head -n 200
            echo "Disk usage:"; df -h
            echo "Recent files in .output:"; (ls -lah .output/public || true)
            exit 1
          }
          date +"generate end   %T"

      - name: Copy Nuxt builds meta into public (guard)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -d ".nuxt/builds/meta" ]; then
            mkdir -p ".output/public/_nuxt/${ASSETS_VERSION}/builds"
            cp -r ".nuxt/builds/meta" ".output/public/_nuxt/${ASSETS_VERSION}/builds/meta"
            echo "Copied .nuxt/builds/meta -> .output/public/_nuxt/${ASSETS_VERSION}/builds/meta"
          else
            echo "No .nuxt/builds/meta found (nothing to copy)."
          fi

      - name: Verify output exists
        shell: bash
        run: |
          test -f .output/public/index.html || (echo "index.html missing" && exit 1)
          echo "files:" $(find .output/public -type f | wc -l)
          du -h -d1 .output | sort -h | tail -n 20

      - name: Assert homepage images exist
        shell: bash
        run: |
          set -euxo pipefail
          for f in \
            .output/public/home-1-original.jpg .output/public/home-1-mosaic.png \
            .output/public/home-2-original.jpg .output/public/home-2-mosaic.png \
            .output/public/home-3-original.jpg .output/public/home-3-mosaic.png
          do
            [ -f "$f" ] || { echo "‚ùå Missing $f in build output"; exit 1; }
          done

      - name: Prepare site artifact
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf site
          rsync -a --delete \
            --exclude='*.gz' --exclude='*.br' \
            .output/public/ site/

      - name: Prune sourcemaps & license stubs
        shell: bash
        run: |
          set -e
          find site -type f -name '*.map' -delete
          find site -type f -name '*.LICENSE.txt' -delete
          echo "After prune:"
          du -sh site || true

      - name: Prune demo/sample assets from artifact
        shell: bash
        run: |
          set -e
          rm -rf site/samples || true
          rm -rf site/demo || true
          du -sh site || true

      - name: Report top 30 largest files (non-fatal)
        shell: bash
        run: |
          # no -e here on purpose; Broken pipe from sort/head shouldn‚Äôt fail the job
          find site -type f -printf '%s\t%p\n' \
            | LC_ALL=C sort -nr \
            | head -n 30 \
            | awk '{ printf "%7.2f MB  %s\n", $1/1048576, $2 }' \
            || true

      - name: Assert index references correct versioned path
        shell: bash
        run: |
          set -euxo pipefail
          grep -q "/_nuxt/${ASSETS_VERSION}/" site/index.html || \
            (echo "index.html does not reference versioned _nuxt path" && exit 1)

      - name: Verify referenced chunks exist (JS only)
        shell: bash
        run: |
          set -euo pipefail
          ver="${ASSETS_VERSION}"
          html="site/index.html"

          # Pull only src/href attributes that end in .js under the versioned _nuxt folder.
          refs=$(grep -oE '(src|href)="/_nuxt/'"$ver"'/[^"]+\.js"' "$html" \
                 | sed -E 's/.*"(\/_nuxt\/[^"]+\.js)".*/\1/' \
                 | grep -v '/builds/' \
                 | sort -u)

          echo "JS refs found:"
          echo "$refs"

          missing=0
          while IFS= read -r p; do
            [ -z "$p" ] && continue
            f="site${p}"
            if [[ ! -f "$f" ]]; then
              echo "Missing chunk: $f"
              missing=1
            fi
          done <<< "$refs"
          exit $missing

      - name: Verify meta JSON exists (Nuxt builds/meta)
        shell: bash
        run: |
          set -euo pipefail
          dir="site/_nuxt/${ASSETS_VERSION}/builds/meta"
          if [[ ! -d "$dir" ]]; then
            echo "Missing meta dir: $dir"; exit 1
          fi
          count=$(ls -1 "$dir"/*.json 2>/dev/null | wc -l | tr -d ' ')
          if [[ "$count" -lt 1 ]]; then
            echo "No meta JSON files present in $dir"; exit 1
          fi
          echo "Meta JSON OK ($count file(s))"

      - name: Check artifact size
        shell: bash
        run: |
          du -sh site
          MAX_MB=100
          SIZE_MB=$(du -sm site | cut -f1)
          if [ "$SIZE_MB" -gt "$MAX_MB" ]; then
            echo "Artifact too large: ${SIZE_MB}MB (limit ${MAX_MB}MB)"
            exit 1
          fi

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 1

  # 3A) Deploy via SWA Action (upload-only)
  deploy-azure-prod:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site
          path: site

      - name: Sanity before deploy
        shell: bash
        run: |
          set -euxo pipefail
          test -f site/index.html || (echo "artifact missing index.html" && exit 1)
          echo "files:" $(find site -type f | wc -l)
          if [ -f site/staticwebapp.config.json ]; then
            if command -v jq >/dev/null 2>&1; then
              jq -r '.navigationFallback' site/staticwebapp.config.json || true
            else
              echo "config present (jq not available)"
            fi
          else
            echo "no staticwebapp.config.json"
          fi

      - name: Deploy to Azure Static Web Apps (prod)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          skip_app_build: true
          app_location: "site"     # folder that contains index.html
          output_location: ""      # MUST be empty string when skip_app_build is true
          production_branch: "main"