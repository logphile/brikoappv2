name: build-and-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

concurrency:
  group: briko-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Make tiny site
        run: |
          mkdir -p smoke
          cat > smoke/index.html <<'HTML'
          <!doctype html><meta charset=utf-8>
          <title>smoke</title><h1>ok</h1>
          HTML
      - name: Deploy smoke via SWA CLI
        run: |
          npm i -g @azure/static-web-apps-cli@1.1.8
          swa deploy smoke --env production --verbose
        env:
          SWA_CLI_DEPLOYMENT_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}

  build-and-deploy:
    needs: deploy-smoke
    if: ${{ success() }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prep pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpmstore-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpmstore-

      - name: Install deps (offline if cache hit)
        run: |
          set -euxo pipefail
          pnpm config set store-dir ~/.pnpm-store
          pnpm fetch --frozen-lockfile || true
          pnpm install --frozen-lockfile --offline || pnpm install --frozen-lockfile

      # ---- BUILD ----
      - name: Build (Nuxt static)
        env:
          NUXT_TELEMETRY_DISABLED: 1
          NUXT_PUBLIC_SUPABASE_URL: ${{ secrets.NUXT_PUBLIC_SUPABASE_URL }}
          NUXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NUXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          set -euxo pipefail
          time pnpm exec nuxi generate

      - name: Verify output exists
        run: |
          test -f .output/public/index.html || (echo "index.html missing" && exit 1)
          du -h -d1 .output | sort -h | tail -n 20

      # ---- MEASURE ----
      - name: Inspect output size (top files)
        run: |
          find .output/public -type f -printf '%s %p\n' | sort -nr | head -n 40 | awk '{printf "%8.1f MB  %s\n", $1/1024/1024, $2}'

      # ---- GUARDRAILS ----
      - name: Artifact size guard
        run: bash scripts/guard-artifacts.sh

      # ---- VERIFY ----
      - name: Verify output exists
        run: |
          test -f .output/public/index.html || (echo "index.html missing" && exit 1)
          echo "Files to upload:"
          find .output/public -maxdepth 1 -type f -printf "%9s  %p\n" | sort -nr | head -n 30
          echo "Dir count:"
          find .output/public -type d | wc -l
          echo "File count:"
          find .output/public -type f | wc -l

      - name: Summarize artifact
        run: |
          echo "Files:" $(find .output/public -type f | wc -l)
          echo "Dirs: " $(find .output/public -type d | wc -l)
          du -h -d1 .output | sort -h | tail -n 20

      # -------------------------
      # Action uploader (primary)
      # -------------------------
      - name: Deploy via Azure Static Web Apps Action
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          skip_app_build: true
          app_location: "."
          output_location: ".output/public"
          production_branch: "main"

      # ---- Fallback only if the Action step failed ----
      - name: Fallback deploy via SWA CLI
        if: failure()
        run: |
          set -euxo pipefail
          npm i -g @azure/static-web-apps-cli@1.1.8
          swa deploy .output/public --env production --verbose
        env:
          SWA_CLI_DEPLOYMENT_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}

      # ---- Keep installs fast: prune store before saving cache ----
      - name: Prune pnpm store (speed up cache save)
        run: pnpm store prune || true
